# from flask import Flask, request, render_template
# import requests

# app = Flask(__name__)

# @app.route("/", methods=["GET", "POST"])
# def index():
#     if request.method == "POST":
#         year = request.form.get("year")
#         n = int(request.form.get("entries_per_page"))
#         url = f"https://services.nvd.nist.gov/rest/json/cves/2.0/?pubStartDate={year}-01-01T00:00:00.000-05:00&pubEndDate={year}-01-14T23:59:59.999-05:00"

#         try:
#             response = requests.get(url)
#             response.raise_for_status()
#             data = response.json()
#             if "vulnerabilities" in data and len(data["vulnerabilities"]) > 0:
#                 cve_list = []
#                 for i in range(min(n, len(data["vulnerabilities"]))):
#                     vuln = data["vulnerabilities"][i]['cve']
#                     attributes = {
#                         "ID": vuln.get("id"),
#                         "Published Date": vuln.get("published"),
#                         "Last Modified Date": vuln.get("lastModified"),
#                         "Source Identifier": vuln.get("sourceIdentifier"),
#                         "Status": vuln.get("vulnStatus")
#                     }
#                     cve_list.append(attributes)
#                 return render_template("result.html", cve_list=cve_list)
#             else:
#                 return render_template("index.html", error="No vulnerbilities found")
#         except requests.exceptions.RequestException as e:
#             return render_template("index.html", error=f"error: {e}")
#     return render_template("index.html")

# if __name__ == "__main__":
#     app.run(debug=True)

from flask import Flask, request, render_template
import requests
import mysql.connector
from mysql.connector import Error

app = Flask(name)

# Connect to the database
def connect_to_database():
    try:
        connection = mysql.connector.connect(
            host="localhost",
            user="root",  
            password="qwerty_123",  
            database="cve_database"  
        )
        return connection
    except Error as e:
        print("Error while connecting to MySQL:", e)
        return None

# Create the CVE details table
def create_cve_table(connection):
    try:
        cursor = connection.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS cve_details (
                id VARCHAR(50) PRIMARY KEY,
                published_date VARCHAR(50),
                last_modified_date VARCHAR(50),
                description TEXT,
                base_score FLOAT,
                base_severity VARCHAR(10)
            )
        """)
        connection.commit()
    except Error as e:
        print("Error while creating table:", e)

# Check if CVE exists in the database
def check_cve_in_database(connection, cve_id):
    try:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT * FROM cve_details WHERE id = %s", (cve_id,))
        return cursor.fetchone()
    except Error as e:
        print("Error while checking CVE in database:", e)
        return None

# Insert CVE data into the database
def insert_cve_into_database(connection, attributes):
    try:
        cursor = connection.cursor()
        cursor.execute("""
            INSERT INTO cve_details (
                id, published_date, last_modified_date, description, base_score, base_severity
            ) VALUES (%s, %s, %s, %s, %s, %s)
        """, (
            attributes["ID"], attributes["Published Date"], attributes["Last Modified Date"],
            attributes["Description"], attributes["Base Score"], attributes["Base Severity"]
        ))
        connection.commit()
    except Error as e:
        print("Error while inserting CVE into database:", e)

# Fetch CVE data from the API
def fetch_cve_from_api(cve_id):
    base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    url = f"{base_url}?cveId={cve_id}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        if "vulnerabilities" in data and len(data["vulnerabilities"]) > 0:
            vuln = data["vulnerabilities"][0]['cve']
            description = next((d["value"] for d in vuln.get("descriptions", []) if d.get("lang") == "en"), None)
            
            attributes = {
                "ID": vuln.get("id"),
                "Published Date": vuln.get("published"),
                "Last Modified Date": vuln.get("lastModified"),
                "Description": description,
                "Base Score": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("baseScore"),
                "Base Severity": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("baseSeverity"),
            }
            return attributes
        else:
            return {"error": "CVE not found or invalid CVE ID."}
    except Exception as e:
        return {"error": str(e)}

# Main route
@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        cve_id = request.form["cve_id"]
        if not cve_id.startswith("CVE-"):
            return render_template("index.html", error="Invalid CVE ID format.")
        
        connection = connect_to_database()
        if connection:
            try:
                create_cve_table(connection)
                cve_data = check_cve_in_database(connection, cve_id)
                if not cve_data:
                    cve_data = fetch_cve_from_api(cve_id)
                    if "error" in cve_data:
                        return render_template("index.html", error=cve_data["error"])
                    else:
                        insert_cve_into_database(connection, cve_data)
                return render_template("result.html", cve_data=cve_data)
            finally:
                connection.close()
        else:
            return render_template("index.html", error="Database connection failed.")
    return render_template("index.html")

if __name__ == "__main__":
    app.run(debug=True)