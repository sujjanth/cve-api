from flask import Flask, request, render_template
import requests
import mysql.connector
from mysql.connector import Error

app = Flask(__name__)

def connect_to_database():
    try:
        connection = mysql.connector.connect(
            host="localhost",
            user="root", 
            password="sujjanth@2003",  
            database="nvd_cve" 
        )
        return connection
    except Error as e:
        print("error while connecting to sql", e)
        return None

def create_cve_table(connection):
    try:
        cursor = connection.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS cve_details (
                id VARCHAR(50) PRIMARY KEY,
                published_date VARCHAR(50),
                last_modified_date VARCHAR(50),
                description TEXT,
                base_score FLOAT,
                base_severity VARCHAR(10),
                vector_string VARCHAR(255),
                attack_complexity VARCHAR(10),
                confidentiality_impact VARCHAR(10),
                integrity_impact VARCHAR(10),
                impact_score FLOAT,
                availability_impact VARCHAR(10),
                exploitability_score FLOAT,
                access_vector VARCHAR(50),
                access_complexity VARCHAR(10),
                authentication VARCHAR(10),
                vulnerable VARCHAR(10),
                criteria VARCHAR(255),
                match_criteria_id VARCHAR(50)
            )
        """)
        connection.commit()
    except Error as e:
        print("error while creating table:", e)

def check_cve_in_database(connection, cve_id):
    try:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT * FROM cve_details WHERE id = %s", (cve_id,))
        return cursor.fetchone()
    except Error as e:
        print("error while checking cve in database:", e)
        return None

def insert_cve_into_database(connection, attributes):
    try:
        cursor = connection.cursor()
        cursor.execute("""
            INSERT INTO cve_details (
                id, published_date, last_modified_date, description, base_score,
                base_severity, vector_string, attack_complexity, confidentiality_impact,
                integrity_impact, impact_score, availability_impact, exploitability_score, access_vector, 
                access_complexity, authentication, vulnerable, criteria, match_criteria_id
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (
            attributes["ID"], attributes["Published Date"], attributes["Last Modified Date"],
            attributes["Description"], attributes["Base Score"], attributes["Base Severity"], 
            attributes["Vector String"], attributes["Attack Complexity"],
            attributes["Confidentiality Impact"], attributes["Integrity Impact"],
            attributes["Impact Score"], attributes["Availability Impact"], attributes["Exploitability Score"],
            attributes["Access Vector"], attributes["Access Complexity"], attributes["Authentication"],
            attributes["Vulnerable"], attributes["Criteria"], attributes["MatchCriteriaId"]
        ))
        connection.commit()
    except Error as e:
        print("error while inserting cve into database:", e)

def fetch_cve_from_api(cve_id):
    base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    url = f"{base_url}?cveId={cve_id}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        if "vulnerabilities" in data and len(data["vulnerabilities"]) > 0:
            vuln = data["vulnerabilities"][0]['cve']
            descriptions = vuln.get("descriptions", [])
            description = next((d["value"] for d in descriptions if d.get("lang") == "en"), None)
            
            attributes = {
                "ID": vuln.get("id"),
                "Published Date": vuln.get("published"),
                "Last Modified Date": vuln.get("lastModified"),
                "Description": description,
                "Base Score": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("baseScore"),
                "Base Severity": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("baseSeverity"),
                "Vector String": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("vectorString"),                
                "Attack Complexity": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("attackComplexity"),
                "Confidentiality Impact": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("confidentialityImpact"),
                "Integrity Impact": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("integrityImpact"),
                "Impact Score": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("impactScore"),
                "Availability Impact": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("availabilityImpact"),
                "Exploitability Score": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("exploitabilityScore"),
                "Access Vector": vuln.get("metrics", {}).get("cvssMetricV2", [{}])[0].get("cvssData", {}).get("accessVector"),
                "Access Complexity": vuln.get("metrics", {}).get("cvssMetricV2", [{}])[0].get("cvssData", {}).get("accessComplexity"),
                "Authentication": vuln.get("metrics", {}).get("cvssMetricV2", [{}])[0].get("cvssData", {}).get("authentication"),
                "Vulnerable": vuln.get("configurations", [{}])[0].get("nodes", [{}])[0].get("cpeMatch", [{}])[0].get("vulnerable"),
                "Criteria": vuln.get("configurations", [{}])[0].get("nodes", [{}])[0].get("cpeMatch", [{}])[0].get("criteria"),
                "MatchCriteriaId": vuln.get("configurations", [{}])[0].get("nodes", [{}])[0].get("cpeMatch", [{}])[0].get("matchCriteriaId", None),

            }
            return attributes
        else:
            return {"error": "CVE not found or invalid CVE ID."}
    except Exception as e:
        return {"error": str(e)}
@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        cve_id = request.form["cve_id"]
        connection = connect_to_database()
        if connection:
            create_cve_table(connection)
            cve_data = check_cve_in_database(connection, cve_id)
            if not cve_data:
                cve_data = fetch_cve_from_api(cve_id)
                if "error" in cve_data:
                    return render_template("index.html", error=cve_data["error"])
                else:
                    insert_cve_into_database(connection, cve_data)
            connection.close()
            return render_template("result.html", cve_data=cve_data)
        else:
            return render_template("index.html", error="database connection failed")
    return render_template("index.html")
if __name__ == "__main__":
    app.run(debug=True)
