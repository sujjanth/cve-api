import requests

cve_id = input("Enter the cve_id: ")

base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
url = f"{base_url}?cveId={cve_id}"
try:
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        if "vulnerabilities" in data and len(data["vulnerabilities"]) > 0:
            vuln = data["vulnerabilities"][0]['cve']
            
            attributes = {
                "ID": vuln.get("id"),
                "Published Date": vuln.get("published"),
                "Last Modified Date": vuln.get("lastModified"),
                "Description": vuln.get("descriptions", [{}])[0].get("value", None) if vuln.get("descriptions", [{}])[0].get("lang") == 'en' else None,
                "Base Score": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("baseScore"),
                "Base Severity": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("baseSeverity"),
                "Vector String":vuln.get("metrics",{}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("vectorString"),                
                "Attack Complexity": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("attackComplexity"),
                "Confidentiality Impact": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("confidentialityImpact"),
                "Integrity Impact": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("integrityImpact"),
                "Impact Score": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("impactScore"),
                "Availability Impact": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("availabilityImpact"),
                "Exploitability Score": vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("exploitabilityScore"),
                "Access Vector": vuln.get("metrics", {}).get("cvssMetricV2", [{}])[0].get("cvssData", {}).get("accessVector"),
                "Access Complexity": vuln.get("metrics", {}).get("cvssMetricV2", [{}])[0].get("cvssData", {}).get("accessComplexity"),
                "Authentication": vuln.get("metrics", {}).get("cvssMetricV2", [{}])[0].get("cvssData", {}).get("authentication"),
                "Vulnerable": vuln.get("configurations", [{}])[0].get("nodes", [{}])[0].get("cpeMatch", [{}])[0].get("vulnerable",None),
                "Criteria": vuln.get("configurations", [{}])[0].get("nodes", [{}])[0].get("cpeMatch", [{}])[0].get("criteria", None),
                "MatchCriteriaId": vuln.get("configurations", [{}])[0].get("nodes", [{}])[0].get("cpeMatch", [{}])[0].get("matchCriteriaId", None),

            }
            print("\nCVE Details:")
            for key, value in attributes.items():
                print(f"{key}: {value}")
    else:
        print(f"failed: {response.status_code}")
except requests.exceptions.RequestException as e:
    print(f"error: {e}")



        